<?php
/**
 * Module to hold custom PeanutBase code.
 */

 
/**
 * Implements hook_blast_linkout_info().
 *
 * Set custom BLAST linkouts here. These will be added to the default linkout
 * types available on the "Blast Database" admin page.
 *
 */
function peanut_custom_blast_linkout_info() {
  $types = array();
  
  $types['peanutbase_gbrowse'] = array(
    'name' => 'PeanutBase GBrowse',
    'process function' => 'peanut_custom_generate_peanutbase_gbrowse_linkout',
    'require_regex' => TRUE,
  );
  
  return $types;
}//peanut_custom_blast_linkout_info


/**
 * The function called when determining linkouts for blast databases 
 * with a linkout type of 'PeanutBase GBrowse'.
 */
function peanut_custom_generate_peanutbase_gbrowse_linkout($url_prefix, $hit, $info, $options = array()) {
  $url = false;
  $blastdb_name = NULL;
  $hit_name = $hit->{'Hit_def'};

  if ($info['Target'] == 'All genomes' || stristr($info['Target'], 'genome')) {
    // default regex
    $regex = "/^\w+\.(\S+).*/";
    
    if (preg_match('/^aradu/', $hit_name) == 1) {
      $blastdb_name = 'PeanutBase_aradu_gbrowse';
    }
    else if (preg_match('/^araip/', $hit_name) == 1) {
      $blastdb_name = 'PeanutBase_araip_gbrowse';
    }
    else {
      // Don't know what to do with this hit
      drupal_set_message("Don't know how to create GBrowse linkout for $hit_name", 'error');
    }  

    $hit_name = preg_replace($regex, '$1', $hit_name);
    $hit->{'linkout_id'} = $hit_name;
    if ($blastdb_info = peanut_custom_getBLASTdbinfo($blastdb_name)) {
//echo "Call tripal_blast_generate_linkout_gbrowse() with URL prefix " . $blastdb_info['urlprefix'].", hit: $hit<br>"; 
      $url = peanut_custom_generate_linkout_gbrowse($blastdb_info['urlprefix'], $hit, $info, $options);
    }
  }
  else {
    // default regex:
    $regex = "/^\w+\.(\S+)/";
    
    if (preg_match('/^aradu/', $hit_name) == 1) {
      $blastdb_name = 'PeanutBase_aradu_gene';
    }
    else if (preg_match('/^araip/', $hit_name) == 1) {
      $blastdb_name = 'PeanutBase_araip_gene';
    }
    else {
      // Don't know what to do with this hit
      drupal_set_message("Don't know how to create linkout for $hit_name", 'error');
    }  

    $hit_name = preg_match($regex, $hit_name, $matches);
    if (isset($matches[1])) {
      $hit->{'linkout_id'} = $matches[1];
    }
    if ($blastdb_name AND $blastdb_info = peanut_custom_getBLASTdbinfo($blastdb_name)) {
      $url = peanut_custom_generate_linkout_gene_gbrowse($blastdb_info['urlprefix'], $hit, $info, $options);
    }
  }

  return $url;
}//peanut_custom_generate_peanutbase_gbrowse_linkout



/**
  * peanut_custom_views_pre_view()
  *
  * override hook_views_pre_view with PeanutBase-specific customizations.
  */
function peanut_custom_views_pre_view(&$view, &$display_id, &$args) {
//drupal_set_message("view: " . print_r(array_keys((array)$view), true));
//("view name: " . print_r($view->name, true));

  // Customize view for tripal_gene module
  if (strstr($view->name, 'gene')) {
    // Give a peanut gene model in example
    $view->display['default']->handler->options['filters']['name']['expose']['description'] = "e.g. [Contains]: Aradu.00EZV";
  }//tripal_gene
}//peanut_custom_views_pre_view



/**
 * Retrieves the url prefix for a blast database based on it's name.
 */
function peanut_custom_getBLASTdbinfo($blastdb_name) {

  $sql = "
    SELECT urlprefix 
    FROM {db} WHERE name='$blastdb_name'";
  if ($res = chado_query($sql)) {
    if ($row=$res->fetchObject()) {
      return array(
        'urlprefix' => $row->urlprefix, 
      );
    }
  }
  
  return false;
}//peanut_custom_getBLASTdbinfo


function peanut_custom_generate_linkout_gbrowse($url_prefix, $hit, $info) {
  $range_info = peanut_getHSPranges($info['HSPs'], 0);
  $ranges = $range_info['ranges'];
  $coords = $range_info['coords'];
//drupal_set_message("ranges: <pre>" . print_r($ranges, true) . "</pre>coords: <pre>" . print_r($coords, true) . "</pre>");
  
  // Calculate the minimum & maximum coordinates.
  $min = min($coords);
  $max = max($coords);

  // Build the link brute force until/unless someone figures out how to prevent
  //   l() from URL-encoding the sub-parameters to "query=".
  $query = "q=".$hit->{'linkout_id'}.":$min..$max";
  $query .= ";add=".$hit->{'linkout_id'}."+BLAST+BlastHit=" . join ("," , $ranges);
  $query .= ";h_feat=BlastHit";
  $url = "<a href=\"$url_prefix$query\">" . $hit->{'linkout_id'} . "</a>";
//drupal_set_message("URL: $url");
  
  return $url;
}//peanut_custom_generate_linkout_gbrowse


function peanut_custom_generate_linkout_gene_gbrowse($url_prefix, $hit, $info) {
  // Hit positions will be relative to the gene model, so adjust to genome position
  $position = peanut_getGenePosition($hit->{'linkout_id'});
  
  $range_info = peanut_getHSPranges($info['HSPs'], $position['start']);
  $ranges = $range_info['ranges'];
  $coords = $range_info['coords'];
  
  // Build the link brute force until/unless someone figures out how to prevent
  //   l() from URL-encoding the sub-parameters to "query=".
  $query = $hit->{'linkout_id'};
  $query .= ";add=".$position['chr']."+BLAST+BlastHit=" . join ("," , $ranges);
  $query .= ";h_feat=BlastHit";
  $url = "<a href=\"$url_prefix$query\">" . $hit->{'linkout_id'} . "</a>";
//drupal_set_message("URL: $url");
  
  return $url;
}//peanut_custom_generate_linkout_gene_gbrowse


function peanut_getHSPranges($hsps, $offset) {
  // First we need to collect the HSPs to define the ranges we want to
  // display on the GBrowse.
  $ranges = array();
  // We also keep track of all the coordinates in order to later
  // calculate the smallest and largest coordinate.
  $coords = array();
  foreach($hsps as $hsp) {
  
    $start = $offset + min($hsp['Hsp_hit-from'], $hsp['Hsp_hit-to']);
    $stop  = $offset + max($hsp['Hsp_hit-from'], $hsp['Hsp_hit-to']);
    
    // Format the hsp for inclusion in the new track later.
    array_push($ranges, "$start..$stop");
    
    // Add both the start & stop to the coordinate list.
    array_push($coords, $start, $stop);
  }
  
  return array('ranges' => $ranges, 'coords' => $coords);
}//peanut_getHSPranges


function peanut_getGenePosition($hit_name) {
  // Get starting position for gene model
  $sql = "
    SELECT fl.fmin, s.uniquename AS chr FROM {featureloc} fl
      INNER JOIN {feature} f ON f.feature_id=fl.feature_id
      INNER JOIN {feature} s ON s.feature_id=fl.srcfeature_id
    WHERE f.uniquename='$hit_name'";
  $results = chado_query($sql);
  foreach ($results as $r) {
//drupal_set_message("$hit_name begins at " . $r->fmin);
    return array('start' => $r->fmin, 'chr' => $r->chr);
  }

  // If we get here, the query failed
  return 0;
}//peanut_getGenePosition

